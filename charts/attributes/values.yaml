# Sets the default number of pod replicas in the deployment.
# Ignored if autoscaling.enabled == true
replicaCount: 1

# Sets the default loglevel for the application. One of the valid python logging
# levels: `DEBUG, INFO, WARNING, ERROR, CRITICAL`
logLevel: DEBUG

# Name of application. Used during oauth flows, for example when connecting to
# the OpenAPI endpoint with an OAuth authentication
serverPublicName: "Attribute Authority"

# Base path for this service. Allows serving multiple services from the same
# origin, e.g. using an ingress with prefix mapping as suggested below.
serverRootPath: /attributes

# Additional information for connecting to 
oidc:
  realm: tdf
  internalHost: http://keycloak/auth
  externalHost: http://localhost:65432/auth
  clientId: tdf-attributes
  clientSecret: myclientsecret

# Configure the container image to use in the deployment.
image:
  # The container's `imagePullPolicy`
  pullPolicy: IfNotPresent
  # The image selector
  name: ghcr.io/opentdf/attributes

# JSON passed to the deployment's template.spec.imagePullSecrets
imagePullSecrets: []
# Select a specific name for the resource, instead of the default, opentdf-claims
nameOverride: ""
# The fully qualified appname override
fullnameOverride: ""

# A service account to create
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: null

# Values for the deployment spec.template.metadata.annotations field
podAnnotations: {}

# Values for deployment's spec.template.spec.securityContext
podSecurityContext: {}
  # fsGroup: 2000

# Values for deployment's spec.template.spec.containers.securityContext
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# JSON locating the secret to pull environment variables from
# Notably, this file should include the following environemnt variable definitions:
#     POSTGRES_PASSWORD: Password corresponding to postgres.user below
secretRef:
  name: attributes-secrets

service:
  type: ClusterIP
  port: 4020

ingress:
  enabled: false
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  rules:
    - host: localhost
      http: &paths
        paths:
          - backend:
              service:
                name: opentdf-attributes
                port:
                  number: 4020
            path: /attributes(/|$)(.*)
            pathType: Prefix
    - host: host.docker.internal
      http: *paths
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

postgres:
  host: localhost
  port: 5432
  user: tdf_attribute_manager
#  value from kubernetes secrets
  password: ""
  database: tdf_database
  schema: tdf_attribute
